#!/usr/bin/python
usage       = "lvalertTest_listen [--options]"
description = "a script that monitors a fakeDB_directory for new lvalert messages and destributes forks processes like lvalert_listen would"
author      = "reed.essick@ligo.org"

#-------------------------------------------------

import os

from ligoTest.lvalert import lvalertTestUtils as lvutils

from ConfigParser import SafeConfigParser

from optparse import OptionParser

#-------------------------------------------------

parser = OptionParser(usage=usage, description=description)

parser.add_option('-v', '--verbose', default=False, action='store_true')

parser.add_option('-f', '--fakeDB-dir', default='.', type='string', help='the directory which FakeDb is managing')
parser.add_option('-C', '--command-filename', default=None, type='string', help='the file into which lvalert commands must be written')

parser.add_option('-c', "--config_file", default=None, type='string', help='config file with list of actions')

parser.add_option('--dont-wait', default=False, action='store_true')

parser.add_option('--cadence', default=0.1, type='float', help='how often we check lvalert.out for new messages')

opts, args = parser.parse_args()

lvalertSrc = os.path.join(opts.fakeDB_dir, 'lvalert.out')
if not os.path.exists(lvalertSrc):
    raise ValueError('could not find lvalert.out file corresponding to --fakeDB-dir : %s'%lvalertSrc)
trackThese = [lvalertSrc]

if opts.command_filename:
    if not os.path.exists(opts.command_filename):
        raise ValueError('could not find --command-filename=%s'%opts.command_filename)
    trackThese.append(opts.command_filename)

#-------------------------------------------------

node2cmd = dict()
if opts.config_file:
    if opts.verbose:
        print "reading config : %s"%opts.config_file
    config = SafeConfigParser()
    config.read(opts.config_file)

    if opts.verbose:
        print "setting up mapping between nodes and commands"

    for section in config.sections():
        if config.has_option(section, 'executable'):
            cmd = config.get(section, 'executable').split()

        elif config.has_option(section, 'executible'):
            cmd = config.get(section, 'executible')

        else:
            raise ValueError('mal-formed config file!')

        node2cmd[section] = cmd

#-------------------------------------------------

if opts.verbose:
    print "monitoring : %s"%(", ".join(trackThese))
    print "  cadence  : %.3f"%opts.cadence

buf = lvutils.LVAlertBuffer( trackThese )
buf.monitor( lvutils.alert2listener, cadence=opts.cadence, node2cmd=node2cmd, verbose=opts.verbose, dont_wait=opts.dont_wait )
