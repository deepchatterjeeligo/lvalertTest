#!/usr/bin/python
usage       = "simulateGraceDBStream [--options] event_config.ini"
description = "a script to submit fake triggers to an instance of GraceDB as well as simulated follow-up processes. Generates events according to either a uniform rate or a Poisson process. This script only schedules the simulated events and forks simulateGraceDBEvent to actually manage submission."
author      = "reed.essick@ligo.org"

#-------------------------------------------------

import time
import numpy as np

import simUtils as utils

import subprocess as sp

from optparse import OptionParser

#-------------------------------------------------

parser = OptionParser( usage=usage, description=description )

parser.add_option("-v", "--verbose", default=False, action="store_true")

### options about gracedb
parser.add_option("-g", "--gracedb-url", default="https://gracedb.ligo.org/api/", type="string" )

### options about simulation
parser.add_option("",   "--distrib", default="poisson", type="string", help="the distribution of events in time. Either \"poisson\" or \"uniform\"")

parser.add_option("-r", "--event-rate", default=0.1, type="float", help="the rate for simulating events specified in Hz")

parser.add_option("-N", "--num-events", default=None, type="int", help="the number of events to simulate.")
parser.add_option("-D", "--duration", default=None, type="float", help="the duration of the experiment specified in seconds.")

### options about forking
parser.add_option("-o", "--output-dir", default=".", type="string")
parser.add_option("-t", "--tag", default="", type="string")

parser.add_option("",   "--persist", default=False, action="store_true", help="keep this process alive until all child processes have completed")

opts, args = parser.parse_args()

if len(args)!=1:
    raise ValueError("please supply exactly 1 eventConfig.ini as an input argument\n%s"%usage)
opts.event_config = args[0]

### figure out parameters of simulation
if not (opts.num_events or opts.duration):
    raise ValueError( "please supply either --num-events or --duration" )
if opts.num_events and opts.duration:
    raise ValueError( "please supply either --num-events or --duration, but not both" )

if opts.distrib not in ["poisson", "uniform"]:
    raise ValueError( "--distrib=%s not understood"%(opts.distib) )

#-------------------------------------------------

### generating simulated event times
waits = []

if opts.num_events: ### specified the number of events 
    if opts.verbose:
        print( "simulating %d events at a rate of %.3f Hz"%(opts.num_events, opts.event_rate) )
    t = 0.0
    while len(waits) < opts.num_events:
        deltaT = utils.poisson_dt( opts.event_rate )
        waits.append( deltaT )
        t += deltaT

    if opts.verbose:    
        print( "drew %d events spaning %.3f sec at a rate of %.3f Hz"%(len(waits), np.sum(waits), opts.event_rate) )

elif opts.duration: ### specified the duration of the experiment
    if opts.verbose:
        print( "simulating %d seconds with an event rate of %.3f Hz"%(opts.duration, opts.event_rate) )
    t = 0.0
    while t < opts.duration:
        deltaT = utils.uniform_dt( opts.event_rate )
        t += deltaT
        if t < opts.duration: ### only keep if it is within the specified duration
            waits.append( deltaT )

    if not len(waits):
        if opts.verbose:
            print "No times found!"
        import sys
        sys.exit(0)

    if opts.verbose:    
        print( "drew %d events spaning %.3f sec at a rate of %.3f Hz"%(len(waits), opts.duration, opts.event_rate) )

#-------------------------------------------------

### run the simulation
if opts.verbose:
    print( "Submitting simulated events to GraceDB" )

procs = []

for ind, wait in enumerate(waits):
    if opts.verbose:
        print( "    waiting %.3f sec"%wait )
    time.sleep(wait)

    cmdStr = "simulateGraceDBEvent -g %(gracedb_url)s %(event_config)s"%(opts.__dict__) + " -o %s/%d"%(opts.output_dir, ind)
    cmd = cmdStr.split()
    out = "%s/event-%d.out"%(opts.output_dir, ind)
    err = out[:-3]+"err"
    if opts.verbose:
        print "    %s 1> %s 2> %s"%(cmdStr, out, err)

    continue
    out_obj = open(out, "w")
    err_obj = open(err, "w")
    procs.append( sp.Popen( cmd, stdout=out_obj, stderr=err_obj ) )
    out_obj.close()
    err_obj.close()

if opts.persist:
    while len(procs):
        procs.pop().wait()
