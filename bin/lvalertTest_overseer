#!/usr/bin/python
usage       = "lvalert_overseer [--options]"
description = "a script that monitors a fakeDB_directory for new lvalert messages and destributes them accordingly"
author      = "reed.essick@ligo.org"

#-------------------------------------------------

import os
import subprocess as sp

from ligoTest.lvalert import lvalertTestUtils as utils

from optparse import OptionParser

#-------------------------------------------------

def alert2server( node, message, username, password, server='lvalert.cgca.uwm.edu', resource=None, max_attempts=None, verbose=False ):
    '''
    actually send the alert to the server
    signature is specified within lvalertTestUtils
    '''
    ### set up tmpfile
    tmpfile = 'lvalert_overseer-tmp.json'
    file_obj = open(tmpfile, 'w')
    file_obj.write( message )
    file_obj.close()

    ### set up command
    cmd = ['lvalert_send', "-a", username, "-b", password, "-s", server, '-n', node, -p, tmpfile]
    if resource:
        cmd += ['-r', resource]
    if max_attempts:
        cmd += ['-m', max_attempts]

    ### run command
    sp.Popen( cmd ).wait()
    
    ### clean up tempfile
    os.remove(tmpfile)

#-------------------------------------------------

parser = OptionParser(usage=usage, description=description)

parser.add_option('-v', '--verbose', default=False, action='store_true')

parser.add_option('-f', '--fakeDB-dir', default='.', type='string', help='the directory which FakeDb is managing')
parser.add_option('-C', '--command-filename', default=None, type='string', help='the file into which lvalert commands must be written')

parser.add_option('--cadence', default=0.1, type='float', help='how often we check lvalert.out for new messages')

opts, args = parser.parse_args()

lvalertSrc = os.path.join(fakeDB_dir, 'lvalert.out')
if not os.path.exists(lvalertSrc):
    raise ValueError('could not find lvalert.out file corresponding to --fakeDB-dir : %s'%lvalertSrc)
trackThese = [lvalertSrc]

if opts.command_filename:
    if not os.path.exists(opts.command_filename):
        raise ValueError('could not find --command-filename=%s'%opts.command_filename)
    trackThese.append(opts.command_filename)

#-------------------------------------------------

if opts.verbose:
    print "monitoring : %s"%(", ".join(trackThese))
    print "  cadence  : %.3f"%opts.cadence

buf = utils.LVAlertBuffer( trackThese )
buf.monitor( alert2server, cadence=opts.cadence, verbose=opts.verbose )
