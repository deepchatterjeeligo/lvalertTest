#!/usr/bin/python
usage       = "lvalert_overseer [--options]"
description = "a script that monitors a fakeDB_directory for new lvalert messages and destributes them accordingly"
author      = "reed.essick@ligo.org"

#-------------------------------------------------

import os

from ligoTest.lvalert import lvalertTestUtils as lvutils

from optparse import OptionParser

#-------------------------------------------------

parser = OptionParser(usage=usage, description=description)

parser.add_option('-v', '--verbose', default=False, action='store_true')

parser.add_option('-f', '--fakeDB-dir', default='.', type='string', help='the directory which FakeDb is managing')
parser.add_option('-C', '--command-filename', default=None, type='string', help='the file into which lvalert commands must be written')

parser.add_option('-a', '--username', default='username', type='string')
parser.add_option('-b', '--password', default='password', type='string')
parser.add_option('-s', "--server",   default="lvalert.cgca.uwm.edu", help="the pubsub server")
parser.add_option('-r', "--resource", default="sender", help="resource to use in JID")
parser.add_option('-m', "--max_attempts", default=10, help="max number of timeouts allowed")

parser.add_option('--cadence', default=0.1, type='float', help='how often we check lvalert.out for new messages')

opts, args = parser.parse_args()

lvalertSrc = os.path.join(opts.fakeDB_dir, 'lvalert.out')
if not os.path.exists(lvalertSrc):
    raise ValueError('could not find lvalert.out file corresponding to --fakeDB-dir : %s'%lvalertSrc)
trackThese = [lvalertSrc]

if opts.command_filename:
    if not os.path.exists(opts.command_filename):
        raise ValueError('could not find --command-filename=%s'%opts.command_filename)
    trackThese.append(opts.command_filename)

#-------------------------------------------------

if opts.verbose:
    print "monitoring : %s"%(", ".join(trackThese))
    print "  cadence  : %.3f"%opts.cadence

buf = lvutils.LVAlertBuffer( trackThese )
buf.monitor( lvutils.alert2server, 
             cadence=opts.cadence, 
             username=opts.username, 
             password=opts.password, 
             server=opts.server, 
             resource=opts.resource, 
             max_attempts=opts.max_attempts, 
             verbose=opts.verbose 
           )
